/**
 * Script d'initialisation du syst√®me de notifications
 * Ce script doit √™tre ex√©cut√© une seule fois pour initialiser la collection notifications
 */

import { db } from "./firebase-init.js";
import { collection, addDoc, Timestamp, getDocs } from "https://www.gstatic.com/firebasejs/11.6.0/firebase-firestore.js";

/**
 * Initialise la collection notifications avec des donn√©es d'exemple
 */
export async function initialiserCollectionNotifications() {
    try {
        console.log("üöÄ Initialisation de la collection notifications...");
        
        // Donn√©es d'exemple pour tester le syst√®me
        const notificationsExemple = [
            {
                titre: "Bienvenue sur Asten Tickets",
                message: "Votre compte a √©t√© configur√© avec succ√®s. Vous pouvez maintenant cr√©er des tickets.",
                type: "message_general",
                destinataire_id: "admin_user_1", // Remplacer par un vrai UID
                entite_type: "systeme",
                entite_id: "welcome",
                lien_action: "/user-dashboard.html",
                donnees_extra: {
                    type_message: "bienvenue"
                },
                cree_par: "system",
                cree_par_type: "system",
                date_creation: Timestamp.now(),
                statut: "non_lue",
                version: "1.0",
                envoyer_email: false,
                envoyer_push: false
            },
            {
                titre: "Maintenance pr√©vue",
                message: "Une maintenance est pr√©vue ce soir de 22h √† 00h. Le syst√®me sera temporairement indisponible.",
                type: "systeme_maintenance",
                destinataire_id: "admin_user_1", // Remplacer par un vrai UID
                entite_type: "systeme",
                entite_id: "maintenance_001",
                lien_action: "/admin-dashboard.html?tab=settings",
                donnees_extra: {
                    date_maintenance: "2024-01-15",
                    heure_debut: "22:00",
                    heure_fin: "00:00",
                    impact: "Syst√®me temporairement indisponible"
                },
                cree_par: "system",
                cree_par_type: "system",
                date_creation: Timestamp.now(),
                statut: "non_lue",
                version: "1.0",
                envoyer_email: true,
                envoyer_push: false
            },
            {
                titre: "Ticket de test cr√©√©",
                message: "Votre ticket \"Test du syst√®me de notifications\" a √©t√© cr√©√© avec succ√®s",
                type: "ticket_cree",
                destinataire_id: "admin_user_1", // Remplacer par un vrai UID
                entite_type: "ticket",
                entite_id: "TEST-001",
                lien_action: "/user-dashboard.html?ticket=TEST-001",
                donnees_extra: {
                    ticket_titre: "Test du syst√®me de notifications",
                    ticket_categorie: "Support Technique",
                    ticket_statut: "Nouveau"
                },
                cree_par: "system",
                cree_par_type: "system",
                date_creation: Timestamp.now(),
                statut: "non_lue",
                version: "1.0",
                envoyer_email: false,
                envoyer_push: false
            }
        ];

        // les notifications d'exemple
        const promises = notificationsExemple.map(async (notification) => {
            try {
                const docRef = await addDoc(collection(db, "notifications"), notification);
                console.log(`‚úÖ Notification cr√©√©e: ${docRef.id}`);
                return docRef.id;
            } catch (error) {
                console.error(`‚ùå Erreur cr√©ation notification: ${error.message}`);
                return null;
            }
        });

        const results = await Promise.all(promises);
        const successCount = results.filter(id => id !== null).length;
        
        console.log(`üéâ Initialisation termin√©e: ${successCount}/${notificationsExemple.length} notifications cr√©√©es`);
        
        return {
            success: true,
            created: successCount,
            total: notificationsExemple.length,
            ids: results.filter(id => id !== null)
        };
        
    } catch (error) {
        console.error("‚ùå Erreur lors de l'initialisation:", error);
        return {
            success: false,
            error: error.message
        };
    }
}

/**
 * V√©rifie si la collection notifications existe et contient des donn√©es
 */
export async function verifierCollectionNotifications() {
    try {
        console.log("üîç V√©rification de la collection notifications...");
        
        const notificationsRef = collection(db, "notifications");
        const snapshot = await getDocs(notificationsRef);
        
        const count = snapshot.size;
        console.log(`üìä Collection notifications: ${count} documents trouv√©s`);
        
        return {
            exists: true,
            count: count,
            needsInit: count === 0
        };
        
    } catch (error) {
        console.error("‚ùå Erreur lors de la v√©rification:", error);
        return {
            exists: false,
            error: error.message
        };
    }
}

/**
 * Nettoie la collection notifications (pour les tests)
 */
export async function nettoyerCollectionNotifications() {
    try {
        console.log("üßπ Nettoyage de la collection notifications...");
        
        const notificationsRef = collection(db, "notifications");
        const snapshot = await getDocs(notificationsRef);
        
        const deletePromises = snapshot.docs.map(doc => doc.ref.delete());
        await Promise.all(deletePromises);
        
        console.log(`üóëÔ∏è ${snapshot.size} notifications supprim√©es`);
        
        return {
            success: true,
            deleted: snapshot.size
        };
        
    } catch (error) {
        console.error("‚ùå Erreur lors du nettoyage:", error);
        return {
            success: false,
            error: error.message
        };
    }
}

/**
 * Fonction principale d'initialisation
 */
export async function initialiserSystemeNotifications() {
    console.log("üöÄ Initialisation du syst√®me de notifications...");
    
    // V√©rifier l'√©tat actuel
    const verification = await verifierCollectionNotifications();
    
    if (!verification.exists) {
        console.log("‚ùå Collection notifications non accessible");
        return verification;
    }
    
    if (verification.needsInit) {
        console.log("üìù Initialisation n√©cessaire, cr√©ation des donn√©es d'exemple...");
        return await initialiserCollectionNotifications();
    } else {
        console.log("‚úÖ Collection notifications d√©j√† initialis√©e");
        return {
            success: true,
            message: "Collection d√©j√† initialis√©e",
            count: verification.count
        };
    }
}

// Fonction pour √™tre appel√©e depuis la console
window.initialiserNotifications = initialiserSystemeNotifications;
window.verifierNotifications = verifierCollectionNotifications;
window.nettoyerNotifications = nettoyerCollectionNotifications;

console.log("üìã Script d'initialisation des notifications charg√©");
console.log("üí° Utilisez initialiserNotifications() pour initialiser le syst√®me");
console.log("üí° Utilisez verifierNotifications() pour v√©rifier l'√©tat");
console.log("üí° Utilisez nettoyerNotifications() pour nettoyer (tests uniquement)"); 