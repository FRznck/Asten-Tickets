#!/usr/bin/env python3
"""
Script de test pour le syst√®me NLP de classification de tickets
"""

import requests
import json
import time
from datetime import datetime

# Configuration
API_BASE_URL = "http://localhost:8000"

def test_api_health():
    """Test de l'√©tat de sant√© de l'API"""
    print("üîç Test de l'√©tat de sant√© de l'API...")
    try:
        response = requests.get(f"{API_BASE_URL}/health")
        if response.status_code == 200:
            health = response.json()
            print(f"‚úÖ API en ligne - Statut: {health['status']}")
            print(f"   Mod√®le charg√©: {health['model_loaded']}")
            print(f"   Firebase connect√©: {health['firebase_connected']}")
            return True
        else:
            print(f"‚ùå Erreur API: {response.status_code}")
            return False
    except requests.exceptions.ConnectionError:
        print("‚ùå Impossible de se connecter √† l'API")
        return False

def test_prediction():
    """Test de pr√©diction de cat√©gorie"""
    print("\nüéØ Test de pr√©diction de cat√©gorie...")
    
    test_cases = [
        {
            "titre": "Mon ordinateur ne d√©marre plus",
            "description": "L'ordinateur affiche un √©cran bleu au d√©marrage et ne r√©pond plus"
        },
        {
            "titre": "Je ne peux pas me connecter",
            "description": "L'application me demande constamment de me reconnecter"
        },
        {
            "titre": "L'application plante",
            "description": "Quand je clique sur le bouton sauvegarder, l'application se ferme"
        },
        {
            "titre": "Comment changer mon mot de passe?",
            "description": "Je ne trouve pas l'option pour modifier mon mot de passe"
        },
        {
            "titre": "Nouvelle fonctionnalit√© souhait√©e",
            "description": "J'aimerais pouvoir exporter mes donn√©es en format Excel"
        }
    ]
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\nüìù Test {i}: {test_case['titre']}")
        try:
            response = requests.post(
                f"{API_BASE_URL}/predict",
                json=test_case,
                headers={"Content-Type": "application/json"}
            )
            
            if response.status_code == 200:
                prediction = response.json()
                print(f"   Cat√©gorie pr√©dite: {prediction['predicted_category']}")
                print(f"   Confiance: {prediction['confidence']:.2%}")
                print(f"   Mots-cl√©s: {', '.join(prediction['keywords'])}")
                print(f"   N√©cessite v√©rification: {prediction['needs_human_review']}")
            else:
                print(f"   ‚ùå Erreur: {response.status_code}")
                
        except requests.exceptions.RequestException as e:
            print(f"   ‚ùå Erreur de connexion: {e}")

def test_model_info():
    """Test des informations du mod√®le"""
    print("\nüìä Test des informations du mod√®le...")
    try:
        response = requests.get(f"{API_BASE_URL}/model-info")
        if response.status_code == 200:
            info = response.json()
            print(f"‚úÖ Nombre d'entra√Ænements: {info['training_count']}")
            print(f"   Dernier entra√Ænement: {info['last_training']}")
            print(f"   Cat√©gories disponibles: {', '.join(info['categories'])}")
            print(f"   Total tickets: {info['total_tickets']}")
        else:
            print(f"‚ùå Erreur: {response.status_code}")
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erreur de connexion: {e}")

def test_categories():
    """Test de r√©cup√©ration des cat√©gories"""
    print("\nüìã Test de r√©cup√©ration des cat√©gories...")
    try:
        response = requests.get(f"{API_BASE_URL}/categories")
        if response.status_code == 200:
            categories = response.json()
            print(f"‚úÖ Cat√©gories disponibles ({len(categories['categories'])}):")
            for i, category in enumerate(categories['categories'], 1):
                print(f"   {i}. {category}")
        else:
            print(f"‚ùå Erreur: {response.status_code}")
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erreur de connexion: {e}")

def test_feedback():
    """Test de sauvegarde de feedback"""
    print("\nüí¨ Test de sauvegarde de feedback...")
    feedback_data = {
        "ticket_id": "test_ticket_123",
        "predicted_category": "Support Technique",
        "actual_category": "Bug Report",
        "confidence": 0.85
    }
    
    try:
        response = requests.post(
            f"{API_BASE_URL}/feedback",
            json=feedback_data,
            headers={"Content-Type": "application/json"}
        )
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ Feedback sauvegard√©: {result['message']}")
        else:
            print(f"‚ùå Erreur: {response.status_code}")
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erreur de connexion: {e}")

def test_retrain():
    """Test de r√©entra√Ænement"""
    print("\nüîÑ Test de r√©entra√Ænement...")
    try:
        response = requests.post(f"{API_BASE_URL}/retrain")
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ R√©entra√Ænement: {result['message']}")
            print(f"   Nombre d'entra√Ænements: {result['training_count']}")
        else:
            print(f"‚ùå Erreur: {response.status_code}")
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erreur de connexion: {e}")

def main():
    """Fonction principale de test"""
    print("=" * 60)
    print("üß™ TEST DU SYST√àME NLP - ASTEN TICKETS")
    print("=" * 60)
    print(f"‚è∞ D√©but des tests: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # Attendre que l'API soit pr√™te
    print("\n‚è≥ Attente du d√©marrage de l'API...")
    time.sleep(3)
    
    # Tests
    if test_api_health():
        test_prediction()
        test_model_info()
        test_categories()
        test_feedback()
        test_retrain()
    else:
        print("\n‚ùå L'API n'est pas accessible. V√©rifiez que le serveur est d√©marr√©.")
        print("   Commande: python run.py --mode api")
    
    print("\n" + "=" * 60)
    print("üèÅ Tests termin√©s")
    print("=" * 60)

if __name__ == "__main__":
    main() 